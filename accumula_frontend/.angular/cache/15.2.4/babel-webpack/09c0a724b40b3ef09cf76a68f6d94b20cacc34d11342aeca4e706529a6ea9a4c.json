{"ast":null,"code":"import { PRODUCTS } from './mock-products';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class ProductService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  getProducts() {\n    const products = of(PRODUCTS);\n    this.messageService.add('ProductService: fetched products');\n    return products;\n  }\n  getProduct(id) {\n    // For now, assume that a product with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const product = PRODUCTS.find(h => h.id === id);\n    this.log(`ProductService: fetched product id=${id}`);\n    // this.messageService.add(`ProductService: fetched product id=${id}`);\n    return of(product);\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAAqBC,EAAE,QAAQ,MAAM;;;;AAOrC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAgB,EAAUC,cAA6B;IAAvD,SAAI,GAAJD,IAAI;IAAsB,mBAAc,GAAdC,cAAc;EAAmB;EAEvEC,GAAG,CAACC,OAAe;IACzB,IAAI,CAACF,cAAc,CAACG,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACpD;EAEAE,WAAW;IACT,MAAMC,QAAQ,GAAGT,EAAE,CAACD,QAAQ,CAAC;IAC7B,IAAI,CAACK,cAAc,CAACG,GAAG,CAAC,kCAAkC,CAAC;IAC3D,OAAOE,QAAQ;EACjB;EAEAC,UAAU,CAACC,EAAU;IACnB;IACA;IACA,MAAMC,OAAO,GAAGb,QAAQ,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAChD,IAAI,CAACN,GAAG,CAAC,sCAAsCM,EAAE,EAAE,CAAC;IACpD;IACA,OAAOX,EAAE,CAACY,OAAO,CAAC;EACpB;;AArBWX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;EAAAe,YAFb;AAAM","names":["PRODUCTS","of","ProductService","constructor","http","messageService","log","message","add","getProducts","products","getProduct","id","product","find","h","factory","providedIn"],"sourceRoot":"","sources":["/Users/anandkumar/Documents/accumula_exercise/frontend/accumula-app/src/app/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from './product';\nimport { PRODUCTS } from './mock-products';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private http: HttpClient, private messageService:MessageService) { }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  getProducts(): Observable<Product[]> {\n    const products = of(PRODUCTS)\n    this.messageService.add('ProductService: fetched products');\n    return products\n  }\n\n  getProduct(id: number): Observable<Product> {\n    // For now, assume that a product with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const product = PRODUCTS.find(h => h.id === id)!;\n    this.log(`ProductService: fetched product id=${id}`)\n    // this.messageService.add(`ProductService: fetched product id=${id}`);\n    return of(product);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}