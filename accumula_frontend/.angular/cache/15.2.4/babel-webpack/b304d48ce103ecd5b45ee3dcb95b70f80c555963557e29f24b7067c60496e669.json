{"ast":null,"code":"import { PRODUCTS } from './mock-products';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class ProductService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.productsUrl = \"http://127.0.0.1:5000/shipping/products\";\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  getProducts() {\n    // const products = of(PRODUCTS)\n    this.messageService.add('ProductService: fetched products');\n    return this.http.get(this.productsUrl).pipe(tap(_ => this.log('fetched products')), catchError(this.handleError('getProducts', [])));\n    // return products\n  }\n\n  getProduct(id) {\n    // For now, assume that a product with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const product = PRODUCTS.find(h => h.id === id);\n    this.log(`ProductService: fetched product id=${id}`);\n    // this.messageService.add(`ProductService: fetched product id=${id}`);\n    return of(product);\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAAqBC,EAAE,QAAQ,MAAM;AAGrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAKrD,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB,EAAUC,cAA6B;IAAvD,SAAI,GAAJD,IAAI;IAAsB,mBAAc,GAAdC,cAAc;IAFpD,gBAAW,GAAG,yCAAyC;EAEgB;EAEvEC,GAAG,CAACC,OAAe;IACzB,IAAI,CAACF,cAAc,CAACG,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACpD;EAEQE,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACN,GAAG,CAAC,GAAGI,SAAS,YAAYE,KAAK,CAACL,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOR,EAAE,CAACY,MAAW,CAAC;IACxB,CAAC;EACH;EAEAG,WAAW;IACT;IACA,IAAI,CAACT,cAAc,CAACG,GAAG,CAAC,kCAAkC,CAAC;IAC3D,OAAO,IAAI,CAACJ,IAAI,CAACW,GAAG,CAAY,IAAI,CAACC,WAAW,CAAC,CAACC,IAAI,CACpDhB,GAAG,CAACiB,CAAC,IAAI,IAAI,CAACZ,GAAG,CAAC,kBAAkB,CAAC,CAAC,EACtCN,UAAU,CAAC,IAAI,CAACS,WAAW,CAAY,aAAa,EAAE,EAAE,CAAC,CAAC,CAC3D;IACD;EACF;;EAEAU,UAAU,CAACC,EAAU;IACnB;IACA;IACA,MAAMC,OAAO,GAAGvB,QAAQ,CAACwB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAChD,IAAI,CAACd,GAAG,CAAC,sCAAsCc,EAAE,EAAE,CAAC;IACpD;IACA,OAAOrB,EAAE,CAACsB,OAAO,CAAC;EACpB;;AAzCWnB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["PRODUCTS","of","catchError","tap","ProductService","constructor","http","messageService","log","message","add","handleError","operation","result","error","console","getProducts","get","productsUrl","pipe","_","getProduct","id","product","find","h","factory","providedIn"],"sourceRoot":"","sources":["/Users/anandkumar/Documents/accumula_exercise/frontend/accumula-app/src/app/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from './product';\nimport { PRODUCTS } from './mock-products';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  private productsUrl = \"http://127.0.0.1:5000/shipping/products\"\n\n  constructor(private http: HttpClient, private messageService:MessageService) { }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n  \n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n  \n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n  \n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  getProducts(): Observable<Product[]> {\n    // const products = of(PRODUCTS)\n    this.messageService.add('ProductService: fetched products');\n    return this.http.get<Product[]>(this.productsUrl).pipe(\n      tap(_ => this.log('fetched products')),\n      catchError(this.handleError<Product[]>('getProducts', []))\n    );\n    // return products\n  }\n\n  getProduct(id: number): Observable<Product> {\n    // For now, assume that a product with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const product = PRODUCTS.find(h => h.id === id)!;\n    this.log(`ProductService: fetched product id=${id}`)\n    // this.messageService.add(`ProductService: fetched product id=${id}`);\n    return of(product);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}